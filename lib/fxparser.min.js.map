{"version":3,"file":"./lib/fxparser.min.js","mappings":"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","sources":["webpack://fxparser/./node_modules/strnum/strnum.js","webpack://fxparser/./src/fxp.js","webpack://fxparser/./src/util.js","webpack://fxparser/./src/validator.js","webpack://fxparser/./src/xmlparser/DocTypeReader.js","webpack://fxparser/./src/xmlparser/OptionsBuilder.js","webpack://fxparser/./src/xmlparser/OrderedObjParser.js","webpack://fxparser/./src/xmlparser/XMLParser.js","webpack://fxparser/./src/xmlparser/node2json.js","webpack://fxparser/./src/xmlparser/xmlNode.js","webpack://fxparser/webpack/bootstrap","webpack://fxparser/webpack/startup"],"sourcesContent":["const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n}\n","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nconst buildOptions = function(options, defaultOptions, props) {\n  let newOptions = {};\n  if (!options) {\n    return defaultOptions; //if there are not options\n  }\n\n  for (let i = 0; i < props.length; i++) {\n    if (options[props[i]] !== undefined) {\n      newOptions[props[i]] = options[props[i]];\n    } else {\n      newOptions[props[i]] = defaultOptions[props[i]];\n    }\n  }\n  return newOptions;\n};\n\nexports.buildOptions = buildOptions;\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\nconst props = [\n  'allowBooleanAttributes',\n  'unpairedTags'\n];\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = util.buildOptions(options, defaultOptions, props);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, entity = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<') {\n                if( hasBody && \n                     xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'N' &&\n                     xmlData[i+4] === 'T' &&\n                     xmlData[i+5] === 'I' &&\n                     xmlData[i+6] === 'T' &&\n                     xmlData[i+7] === 'Y'\n                ){\n                    i += 7;\n                    entity = true;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'L' &&\n                     xmlData[i+4] === 'E' &&\n                     xmlData[i+5] === 'M' &&\n                     xmlData[i+6] === 'E' &&\n                     xmlData[i+7] === 'N' &&\n                     xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( //comment\n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === '-' &&\n                    xmlData[i+3] === '-'\n                ){\n                    comment = true;\n                }else{\n                    throw new Error(\"Invalid DOCTYPE\");\n                }\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') {\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                    }else{\n                        throw new Error(`Invalid XML comment in DOCTYPE`);\n                    }\n                }else if(entity){\n                    parseEntityExp(exp, entities);\n                    entity = false;\n                }\n                angleBracketsCount--;\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nconst entityRegex = RegExp(\"^\\\\s([a-zA-z0-0]+)[ \\t](['\\\"])([^&]+)\\\\2\");\nfunction parseEntityExp(exp, entities){\n    const match = entityRegex.exec(exp);\n    if(match){\n        entities[ match[1] ] = {\n            regx : RegExp( `&${match[1]};`,\"g\"),\n            val: match[3]\n        };\n    }\n}\nmodule.exports = readDocType;","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n};\n   \nconst props = [\n    'preserveOrder',\n    'attributeNamePrefix',\n    'attributesGroupName',\n    'textNodeName',\n    'ignoreAttributes',\n    'removeNSPrefix',\n    'allowBooleanAttributes',\n    'parseTagValue',\n    'parseAttributeValue',\n    'trimValues',\n    'cdataPropName',\n    'tagValueProcessor',\n    'attributeValueProcessor',\n    'numberParseOptions',\n    'stopNodes',\n    'alwaysCreateTextNode',\n    'isArray',\n    'commentPropName',\n    'unpairedTags',\n    'processEntities',\n    'htmlEntities'\n];\n  \nconst util = require('../util');\n\nconst buildOptions = function(options) {\n    return util.buildOptions(options, defaultOptions, props);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;\nexports.props = props;","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"amp\" : { regex: /&(amp|#38|#x26);/g, val : \"&\"},\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      const aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(currentNode){\n          textData = this.parseTextData(textData\n            , currentNode.tagname\n            , jPath\n            ,false\n            , currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false\n            , Object.keys(currentNode.child).length === 0);\n          if(textData !== undefined &&  textData !== \"\") currentNode.add(this.options.textNodeName, textData);\n          textData = \"\";\n        }\n\n        jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n        \n        currentNode = this.tagsNodeStack.pop();//avoid recurssion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n        let result = readTagExp(xmlData,i, false, \"?>\");\n        if(!result) throw new Error(\"Pi Tag is not closed.\");\n        \n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n          //TODO: remove repeated code\n          if(textData){ //store previously collected data as textNode\n            textData = this.parseTextData(textData\n              , currentNode.tagname\n              , jPath\n              ,false\n              , currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false\n              , Object.keys(currentNode.child).length === 0);\n\n            if(textData !== undefined &&  textData !== \"\") currentNode.add(this.options.textNodeName, textData);\n            textData = \"\";\n          }\n\n          const childNode = new xmlNode(tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n          }\n          currentNode.addChild(childNode);\n\n        i = closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          //TODO: remove repeated code\n          if(textData){ //store previously collected data as textNode\n            textData = this.parseTextData(textData\n              , currentNode.tagname\n              , jPath\n              ,false\n              , currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false\n              , Object.keys(currentNode.child).length === 0);\n  \n            if(textData !== undefined &&  textData !== \"\") currentNode.add(this.options.textNodeName, textData);\n            textData = \"\";\n          }\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        if(textData){ //store previously collected data as textNode\n          textData = this.parseTextData(textData\n            , currentNode.tagname\n            , jPath\n            ,false\n            , currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false\n            , Object.keys(currentNode.child).length === 0);\n\n          if(textData !== undefined &&  textData !== \"\") currentNode.add(this.options.textNodeName, textData);\n          textData = \"\";\n        }\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(!val) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n       \n        let result = readTagExp(xmlData,i, this. options.removeNSPrefix);\n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.parseTextData(textData\n              , currentNode.tagname\n              , jPath\n              , false\n              , currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false\n              , false);\n            if(textData !== undefined &&  textData !== \"\") currentNode.add(this.options.textNodeName, textData);\n            textData = \"\";\n          }\n        }\n\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n        }\n\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){}\n          //boolean tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){}\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${tagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n          }\n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          currentNode.addChild(childNode);\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            \n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n            currentNode.addChild(childNode);\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            currentNode.addChild(childNode);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nconst replaceEntitiesValue = function(val){\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n  }\n  return val;\n}\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-dobule quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\" && xmlData[i+1] === \"/\"){ \n        const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n        let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n        if(closeTagName === tagName){\n          return {\n            tagContent: xmlData.substring(startIndex, i),\n            i : closeIndex\n          }\n        }\n        i=closeIndex;\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined) {\n        if(!Array.isArray(compressedObj[property])) {\n          compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const propCount = Object.keys(obj).length;\n  if( propCount === 0 || (propCount === 1 && obj[options.textNodeName]) ) return true;\n  return false;\n}\nexports.prettify = prettify;\n","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(316);\n"],"names":["hexRegex","numRegex","Number","parseInt","window","parseFloat","consider","hex","leadingZeros","decimalPoint","eNotation","module","exports","str","options","Object","assign","trimmedStr","trim","undefined","skipLike","test","match","exec","sign","numTrimmedByZeros","numStr","indexOf","replace","length","substr","num","search","validator","require","XMLParser","XMLValidator","nameRegexp","regexName","RegExp","isExist","v","isEmptyObject","obj","keys","merge","target","a","arrayMode","len","i","getValue","buildOptions","defaultOptions","props","newOptions","isName","string","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","index","push","util","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","readAttributeStr","attrStr","startChar","tagClosed","value","validate","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","substring","result","attrStrStart","isValid","validateAttributeString","code","msg","line","otg","pop","openPos","col","afterAmp","validateAmpersand","JSON","stringify","map","t","validAttrStrRegxp","attrNames","getPositionFromMatch","attrName","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","split","entityRegex","parseEntityExp","exp","entities","regx","val","Error","hasBody","entity","comment","preserveOrder","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","cdataPropName","numberParseOptions","tagValueProcessor","attributeValueProcessor","stopNodes","alwaysCreateTextNode","isArray","commentPropName","processEntities","htmlEntities","xmlNode","readDocType","toNumber","addExternalEntities","externalEntities","entKeys","ent","this","lastEntities","parseTextData","jPath","dontTrim","hasAttributes","isLeafNode","replaceEntitiesValue","newval","parseValue","resolveNameSpace","prefix","charAt","attrsRegx","buildAttributesMap","attrs","oldVal","aName","newVal","attrCollection","parseXml","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","child","add","lastIndexOf","tagsNodeStack","readTagExp","tagExp","attrExpPresent","childNode","addChild","endIndex","docTypeEntities","lastTag","isItStopNode","tagContent","readStopNodeData","entityName","currentTagName","allNodesExp","stopNodePath","stopNodeExp","errMsg","closingIndex","closingChar","attrBoundary","ch","data","tagExpWithClosingIndex","separatorIndex","shouldParse","OrderedObjParser","prettify","parse","validationOption","toString","orderedObjParser","orderedResult","addEntity","key","compress","arr","text","compressedObj","newJpath","tagObj","property","propName","isLeaf","isLeafTag","assignAttributes","Array","attrMap","jpath","atrrName","propCount","node","XmlNode","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}